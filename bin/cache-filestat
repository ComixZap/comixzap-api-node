#!/usr/bin/env node
var path = require('path')
var fs = require('fs')
var statDir = require('stat-all-the-things')
var async = require('async')

var levelup = require('levelup')
var PkzipParser = require('pkzip-parser')

var config = require(path.resolve('config.json'))

var dirQueue = async.queue(dirworker, 50)
var fileQueue = async.queue(fileworker, 100)

if(config.db){
  var db = levelup(config.db, {encoding:'json'})
  dirQueue.push(config.root)
}

function dirworker(dirname, cb){
  statDir(dirname, function(err, stats){
    if(err) console.error(err), cb()
    for(var filename in stats){
      var stat = stats[filename].stat
      if(stat.type == "directory"){
        dirQueue.push(path.join(dirname, filename))
      } else {
        if(filename.match(/\.cbz$/))
          fileQueue.push(path.join(dirname, filename))
      }
    }
    cb()
  })
}

function fileworker(filename, cb){
  var key = 'filestat?filename=' + filename
  db.get(key, function(err, value){
    if(err){
      if(err.name == "NotFoundError"){
        console.log(filename)
        var stream = fs.createReadStream(filename)
        var parser = new PkzipParser(stream)
        var files = []
        parser.on('file', function(stat){
          files.push({
            filename: stat.fileName
            , offset: stat.offset
            , compressedSize: stat.compressedSize
            , headerSize: stat.headerSize
            , end: stat.offset + stat.length
            , length: stat.length
          })
        })
        parser.on('error', function(err){
          console.error(err)
        })
        parser.on('end', function(){
          db.put('filestat?filename=' + filename, files, function(err){
            if(err)console.log(err)
            else console.log(filename + ' written')
          })

          cb()
        })
      } else {
        console.log(error)
        cb()
      }
    } else {
      console.log(':: EXISTS :: ' + key )
      cb()
    }
  })
}
